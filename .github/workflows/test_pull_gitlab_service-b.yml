# This is a basic workflow to help you get started with Actions

name: Test Pull GitLab Service-B

on:          
  push:
    #branches: [ master ]
    paths-ignore:
      - '.github/**'      
      - 'badges/*'      
      - 'pom.xml'
      - '*.svg'
      - '*.json'
      - '*.md'
  workflow_dispatch: 
  
env:
  MANAGE_BRANCH: main  
  GITLAB_REPO: git.g-able.com/ais-esaving/service-b.git
  GITLAB_HOME_PATH: service-b
  POM_VERSION_LINE_NUMBER: 13
  ARTIFACT_NAME: api-demo-service-b
  CONTAINER_REGISTRY : gableesaving.azurecr.io
  CONTAINER_REPO: gableesaving.azurecr.io/api-demo-service-b
  
jobs:
  generate-version:
    runs-on: ubuntu-latest    
    
    steps:
      - name: Checkout from GitLab
        run: | 
            git clone https://${{ secrets.GITLAB_USERNAME }}:${{ secrets.GITLAB_TOKEN }}@${{ env.GITLAB_REPO }}
            pwd
            ls -l            
            cd ${{ env.GITLAB_HOME_PATH }}
            pwd
            ls -l
            git switch ${{ env.MANAGE_BRANCH }}
            
          
      - name: Generate new version
        run: |
            cd ${{ env.GITLAB_HOME_PATH }}
            pwd
            cur_version=$(head -${{ env.POM_VERSION_LINE_NUMBER }} pom.xml|tail -1|grep -oPm1 "(?<=<version>)[^<]+")
            echo "cur_version=${cur_version}"
            major_version=$(echo ${cur_version}|awk -F'.' '{print($1)}')
            minor_version=$(echo ${cur_version}|awk -F'.' '{print($2)}')
            build_version=$(echo ${cur_version}|awk -F'.' '{print($3)}')
            ((new_build_version=build_version+1))
            new_version=${major_version}.${minor_version}.${new_build_version}
            echo "new_version=${new_version}"
            mkdir version
            echo CUR_VERSION=${cur_version} > version/version.txt
            echo NEW_VERSION=${new_version} >> version/version.txt
            sed -i ${{ env.POM_VERSION_LINE_NUMBER }}"s/<version>${cur_version}<\/version>/<version>${new_version}<\/version>/" pom.xml  
            cp pom.xml version/
            
            
      - name: Upload version artifact
        uses: actions/upload-artifact@v1
        with:
          name: version          
          path: ${{ env.GITLAB_HOME_PATH}}/version
          

  build-container:
    runs-on: ubuntu-latest    
    needs: [generate-version]
    #environment: ${{ env.TARGET_ENV }}
    
    steps:    
      - name: Checkout from GitLab
        run: | 
            git clone https://${{ secrets.GITLAB_USERNAME }}:${{ secrets.GITLAB_TOKEN }}@${{ env.GITLAB_REPO }}
            pwd
            ls -l            
            cd ${{ env.GITLAB_HOME_PATH }}
            pwd
            ls -l
            git switch ${{ env.MANAGE_BRANCH }}
          
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          
      - name: Download version artifact
        uses: actions/download-artifact@v1
        with:
          name: version

      - name: Check Current Version         
        run: |
          pwd
          ls -l
          cur_version=$(cat version/version.txt|grep 'CUR_VERSION'|awk -F'=' '{print($2)}')
          echo "Version is ${cur_version}"
          echo "VERSION_NO=${cur_version} " >> $GITHUB_ENV  
          
      - name: Build with Maven
        run: |
            cd ${{ env.GITLAB_HOME_PATH }}            
            pwd
            mkdir -p badges
            #mvn package -Pcoverage
            mvn package
            ls -l target
            #ls -l badges
            #ls -l target/site/jacoco/
      
      
      #- name: Static Analysis Security Test
      #  run: |
      #      cd ${{ env.GITLAB_HOME_PATH }}            
      #      pwd
      #      mvn sonar:sonar -Dsonar.projectKey=esaving -Dsonar.host.url=http://bm-webapp-sonarqube.azurewebsites.net -Dsonar.login=6bede3c69463ce70b8b0c3a6a05c5c706eadac34
            
      - name: Static Test
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
           SONAR_TOKEN: 6bede3c69463ce70b8b0c3a6a05c5c706eadac34
           SONAR_HOST_URL: http://bm-webapp-sonarqube.azurewebsites.net
        run: |
          cd ${{ env.GITLAB_HOME_PATH }}
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=test
      
      - name: SonarQube Quality Gate Check      
        uses: SonarSource/sonarqube-quality-gate-action@v1.0.0
        timeout-minutes: 5
        env:
         SONAR_TOKEN: 6bede3c69463ce70b8b0c3a6a05c5c706eadac34            
            
      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
            login-server: ${{ env.CONTAINER_REGISTRY }}          
            username: ${{ secrets.ACR_USERNAME }}
            password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Container Image    
        run: |
            cd ${{ env.GITLAB_HOME_PATH }}            
            pwd
            ls -l
            docker build . -t ${{ env.CONTAINER_REPO }}:${{ env.VERSION_NO }} 
            docker push ${{ env.CONTAINER_REPO }}:${{ env.VERSION_NO }}  
            
          
      - name: Run the Anchore scan action itself with GitHub Advanced Security code scanning integration enabled
        uses: anchore/scan-action@b08527d5ae7f7dc76f9621edb6e49eaf47933ccd
        with:
          image: "${{ env.CONTAINER_REPO }}:${{ env.VERSION_NO }}"
          # Generate a SARIF report and set the `sarif` output parameter after successful action execution.  This report is compatible with GitHub Automated Code Scanning (ACS), as the artifact to upload for display as a Code Scanning Alert report.
          acs-report-enable: true
          # Set this to any value to enable verbose debug output
          #debug: # optional, default is false
          # Set to false to avoid failing based on severity-cutoff. Default is to fail when severity-cutoff is reached (or surpassed)
          fail-build: false # optional, default is true      
          # Optionally specify the minimum vulnerability severity to trigger an "error" level ACS result.  Valid choices are "negligible", "low", "medium", "high" and "critical".  Any vulnerability with a severity less than this value will lead to a "warning" result.  Default is "medium".
          severity-cutoff: critical # optional, default is medium

      - name: Upload Anchore Scan Report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif        
